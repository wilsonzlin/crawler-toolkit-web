Stack Overflow

About

Products

For Teams

Stack Overflow
Public questions & answers

Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers

Talent

Build your employer brand

Advertising
Reach developers & technologists worldwide

Labs
The future of collective knowledge sharing

About the company

Loading…

current community

Stack Overflow

help
chat

Meta Stack Overflow

your communities

Sign up or log in to customize your list.

more stack exchange communities

company blog

Log in

Sign up

Home

Questions

Tags

Users

Companies

Labs

Discussions

New

Collectives

Communities for your favorite technologies. Explore all Collectives

Teams

Ask questions, find answers and collaborate at work with Stack Overflow for Teams.

Explore Teams
Create a free Team

Teams

Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams

Collectives™ on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you use most.

Learn more about Collectives

Teams

Q&A for work

Connect and share knowledge within a single location that is structured and easy to search.

Learn more about Teams

Get early access and see previews of new features.

Learn more about Labs

Remove a fixed prefix/suffix from a string in Bash

Ask Question

Asked
10 years, 10 months ago

Modified
5 months ago

Viewed
743k times

798

I want to remove the prefix/suffix from a string. For example, given:

string="hello-world"
prefix="hell"
suffix="ld"

How do I get the following result?

"o-wor"

bash

replace

pattern-matching

string-interpolation

Share

Improve this question

Follow

edited Feb 8, 2023 at 5:47

Mateen Ulhaq

25.8k2020 gold badges111111 silver badges143143 bronze badges

asked May 18, 2013 at 11:37

Dušan RychnovskýDušan Rychnovský

12.1k88 gold badges4242 silver badges6666 bronze badges

1

26

Be very wary when linking to the so-called Advanced Bash Scripting Guide; it contains a mixture of good advice and terrible.

– tripleee

Oct 19, 2016 at 3:38

Add a comment
 | 

9 Answers
9

Sorted by:

Reset to default

Highest score (default)

Trending (recent votes count more)

Date modified (newest first)

Date created (oldest first)

1209

$ prefix="hell"
$ suffix="ld"
$ string="hello-world"
$ foo=${string#"$prefix"}
$ foo=${foo%"$suffix"}
$ echo "${foo}"
o-wor

This is documented in the Shell Parameter Expansion section of the manual:

${parameter#word}

${parameter##word}

The word is expanded to produce a pattern and matched according to the rules described below (see Pattern Matching). If the pattern matches the beginning of the expanded value of parameter, then the result of the expansion is the expanded value of parameter with the shortest matching pattern (the # case) or the longest matching pattern (the ## case) deleted. […]

${parameter%word}

${parameter%%word}

The word is expanded to produce a pattern and matched according to the rules described below (see Pattern Matching). If the pattern matches a trailing portion of the expanded value of parameter, then the result of the expansion is the value of parameter with the shortest matching pattern (the % case) or the longest matching pattern (the %% case) deleted. […]

Share

Improve this answer

Follow

edited Mar 14, 2022 at 18:25

cosbor11

15.3k1010 gold badges5555 silver badges7373 bronze badges

answered May 18, 2013 at 11:43

Adrian FrühwirthAdrian Frühwirth

44.1k1010 gold badges6161 silver badges7171 bronze badges

8

46

Is there a way to combine the two in one line? I tried ${${string#prefix}%suffix} but it doesn't work.

– static_rtti

Mar 5, 2014 at 8:18

36

@static_rtti No, unfortunately you cannot nest parameter substitution like this. I know, it's a shame.

– Adrian Frühwirth

Mar 5, 2014 at 8:34

143

@AdrianFrühwirth : the whole language is a shame, but it's so useful :)

– static_rtti

Mar 5, 2014 at 9:24

3

@static_rtti , there is a workaround: echo basename ${string/hell} ld (where the grey part is between backticks)

– ROMANIA_engineer

Dec 27, 2015 at 16:54

2

@ccpizza Parameter substitution does not know such modifiers but if it's a fixed string you could always do e.g. ${foo#[Bb][Aa][Rr]}. Not pretty but still possibly better than an unnecessary subshell/fork, depending on the situation.

– Adrian Frühwirth

Jul 25, 2016 at 18:22

 | 
Show 3 more comments

160

Using sed:

$ echo "$string" | sed -e "s/^$prefix//" -e "s/$suffix$//"
o-wor

Within the sed command, the ^ character matches text beginning with $prefix, and the trailing $ matches text ending with $suffix.

Adrian Frühwirth makes some good points in the comments below, but sed for this purpose can be very useful. The fact that the contents of $prefix and $suffix are interpreted by sed can be either good OR bad- as long as you pay attention, you should be fine. The beauty is, you can do something like this:

$ prefix='^.*ll'
$ suffix='ld$'
$ echo "$string" | sed -e "s/^$prefix//" -e "s/$suffix$//"
o-wor

which may be what you want, and is both fancier and more powerful than bash variable substitution. If you remember that with great power comes great responsibility (as Spiderman says), you should be fine.

A quick introduction to sed can be found at http://evc-cit.info/cit052/sed_tutorial.html

A note regarding the shell and its use of strings:

For the particular example given, the following would work as well:

$ echo $string | sed -e s/^$prefix// -e s/$suffix$//

...but only because:

echo doesn't care how many strings are in its argument list, and

There are no spaces in $prefix and $suffix

It's generally good practice to quote a string on the command line because even if it contains spaces it will be presented to the command as a single argument. We quote $prefix and $suffix for the same reason: each edit command to sed will be passed as one string. We use double quotes because they allow for variable interpolation; had we used single quotes the sed command would have gotten a literal $prefix and $suffix which is certainly not what we wanted.

Notice, too, my use of single quotes when setting the variables prefix and suffix. We certainly don't want anything in the strings to be interpreted, so we single quote them so no interpolation takes place. Again, it may not be necessary in this example but it's a very good habit to get into.

Share

Improve this answer

Follow

edited Aug 9, 2016 at 17:01

Mike S

1,2541414 silver badges2121 bronze badges

answered May 17, 2014 at 19:38

user2888410user2888410

3

11

Unfortunately, this is bad advice for several reasons: 1) Unquoted, $string is subject to word splitting and globbing. 2) $prefix and $suffix can contain expressions that sed will interpret, e.g. regular expressions or the character used as delimiter which will break the whole command. 3) Calling sed two times is not necessary (you can -e 's///' -e '///' instead) and the pipe could also be avoided. For example, consider string='./ *' and/or prefix='./' and see it break horribly due to 1) and 2).

– Adrian Frühwirth

May 19, 2014 at 6:59

Fun note: sed can take almost anything as a delimiter. In my case, since I was parsing prefix-directories out of paths, I couldn't use /, so I used sed "s#^$prefix##, instead. (Fragility: filenames can't contain #. Since I control the files, we're safe, there.)

– Olie

Oct 21, 2014 at 21:24

3

@Olie: As I understood your original comment, you were saying that the limitation of your choice to use # as sed's delimiter meant that you couldn't handle files containing that character.

– P Daddy

Mar 4, 2015 at 17:03

Add a comment
 | 

30

$ string="hello-world"
$ prefix="hell"
$ suffix="ld"

$ #remove "hell" from "hello-world" if "hell" is found at the beginning.
$ prefix_removed_string=${string/#$prefix}

$ #remove "ld" from "o-world" if "ld" is found at the end.
$ suffix_removed_String=${prefix_removed_string/%$suffix}
$ echo $suffix_removed_String
o-wor

Notes:

#$prefix : adding # makes sure that substring "hell" is removed only if it is found in beginning.
%$suffix : adding % makes sure that substring "ld" is removed only if it is found in end.

Without these, the substrings "hell" and "ld" will get removed everywhere, even it is found in the middle.

Share

Improve this answer

Follow

edited Sep 8, 2018 at 10:13

answered Sep 8, 2018 at 8:47

Vijayendar GururajaVijayendar Gururaja

79211 gold badge99 silver badges1616 bronze badges

2

1

Thanks for the Notes! qq: in your code example you also have a forward slash / right after the string, what is that for?

– DiegoSalazar

May 15, 2019 at 15:29

1

/ separates the current string and the sub string. sub-string here is the suffix in th posted question.

– Vijayendar Gururaja

May 16, 2019 at 5:48

Add a comment
 | 

25

Do you know the length of your prefix and suffix? In your case:

result=$(echo $string | cut -c5- | rev | cut -c3- | rev)

Or more general:

result=$(echo $string | cut -c$((${#prefix}+1))- | rev | cut -c$((${#suffix}+1))- | rev)

But the solution from Adrian Frühwirth is way cool! I didn't know about that!

Share

Improve this answer

Follow

edited Jan 14, 2018 at 2:39

answered Jan 16, 2017 at 20:09

tommy.carstensentommy.carstensen

9,2821515 gold badges6767 silver badges110110 bronze badges

1

1

This does not "remove the prefix/suffix", but does instead remove as many characters, which only matters if it's not certain that the string actually starts/ends with the pre-/suffix but is an important caveat about this solution to keep in mind.

– cafce25

Oct 6, 2023 at 12:50

Add a comment
 | 

22

I use grep for removing prefixes from paths (which aren't handled well by sed):

echo "$input" | grep -oP "^$prefix\K.*"

\K removes from the match all the characters before it.

Share

Improve this answer

Follow

edited Oct 16, 2016 at 9:45

dipdapdop

12611 silver badge1010 bronze badges

answered Sep 16, 2016 at 11:28

Vladimir PetrakovichVladimir Petrakovich

4,22411 gold badge3030 silver badges4646 bronze badges

3

2

grep -P is a nonstandard extension. More power to you if it's supported on your platform, but this is dubious advice if your code needs to be reasonably portable.

– tripleee

May 28, 2019 at 10:32

@tripleee Indeed. But I think a system with GNU Bash installed also have a grep that supports PCRE.

– Vladimir Petrakovich

May 29, 2019 at 8:49

3

No, MacOS for example has Bash out of the box but not GNU grep. Earlier versions actually had the -P option from BSD grep but they removed it.

– tripleee

May 29, 2019 at 8:56

Add a comment
 | 

10

Small and universal solution:

expr "$string" : "$prefix\(.*\)$suffix"

Share

Improve this answer

Follow

answered Jul 8, 2017 at 23:34

Tosi DoTosi Do

11311 silver badge44 bronze badges

3

1

If you are using Bash, you should probably not be using expr at all. It was a sort of convenient kitchen sink utility back in the days of the original Bourne shell, but is now way past its best-before date.

– tripleee

May 28, 2019 at 10:34

1

Uh, why? expr is old, but never changes, and will probably always be available. As long as you invoke an external binary (as opposed to using BASH expressions), grep, sed or expr are pretty much equivalent (perl / awk would be costlier).

– usretc

Mar 8, 2021 at 6:36

Fantastic, this is simplest, I've ever seen.

– OfusJK

Jun 8, 2023 at 7:28

Add a comment
 | 

10

Using the =~ operator:

$ string="hello-world"
$ prefix="hell"
$ suffix="ld"
$ [[ "$string" =~ ^$prefix(.*)$suffix$ ]] && echo "${BASH_REMATCH[1]}"
o-wor

Share

Improve this answer

Follow

edited Oct 19, 2018 at 18:08

answered Jan 12, 2018 at 5:14

Martin - マーチンMartin - マーチン

24155 silver badges1111 bronze badges

Add a comment
 | 

8

NOTE: Not sure if this was possible back in 2013 but it's certainly possible today (10 Oct 2021) so adding another option ...

Since we're dealing with known fixed length strings (prefix and suffix) we can use a bash substring to obtain the desired result with a single operation.

Inputs:

string="hello-world"
prefix="hell"
suffix="ld"

Plan:

bash substring syntax: ${string:<start>:<length>}

skipping over prefix="hell" means our <start> will be 4

<length> will be total length of string (${#string}) minus the lengths of our fixed length strings (4 for hell / 2 for ld)

This gives us:

$ echo "${string:4:(${#string}-4-2)}"
o-wor

NOTE: the parens can be removed and still obtain the same result

If the values of prefix and suffix are unknown, or could vary, we can still use this same operation but replace 4 and 2 with ${#prefix} and ${#suffix}, respectively:

$ echo "${string:${#prefix}:${#string}-${#prefix}-${#suffix}}"
o-wor

Share

Improve this answer

Follow

answered Oct 10, 2021 at 13:56

markp-fusomarkp-fuso

34.8k55 gold badges2020 silver badges4040 bronze badges

1

1

Great option! Worth calling out: a key difference between this solution and the others is that if the source string does not start with prefix or end with suffix, then other solutions will not clip anything, where this solution will clip the length of the suffix away. This is not necessarily a problem, just a limitation to be aware of. If you're not sure if the string starts or ends with the prefix/suffix, simply wrap this statement in the appropriate if-statement to check before trimming.

– Stobor

Mar 8, 2022 at 23:18

Add a comment
 | 

6

Using @Adrian Frühwirth answer:

function strip {
local STRING=${1#$"$2"}
echo ${STRING%$"$2"}
}

use it like this

HELLO=":hello:"
HELLO=$(strip "$HELLO" ":")
echo $HELLO # hello

Share

Improve this answer

Follow

answered Feb 8, 2017 at 6:47

math2001math2001

4,2672525 silver badges3535 bronze badges

0

Add a comment
 | 

Your Answer

Reminder: Answers generated by artificial intelligence tools are not allowed on Stack Overflow. Learn more

Thanks for contributing an answer to Stack Overflow!

Please be sure to answer the question. Provide details and share your research!

But avoid …

Asking for help, clarification, or responding to other answers.

Making statements based on opinion; back them up with references or personal experience.

To learn more, see our tips on writing great answers.

Draft saved

Draft discarded

Sign up or log in

Sign up using Google

Sign up using Facebook

Sign up using Email and Password

Submit

Post as a guest

Name

Email

Required, but never shown

Post Your Answer

Discard

By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.

Not the answer you're looking for? Browse other questions tagged

bash

replace

pattern-matching

string-interpolation

or ask your own question.

The Overflow Blog

Why the creator of Node.js® created a new JavaScript runtime

Is AI making your code worse?

Featured on Meta

Changing how community leadership works on Stack Exchange: a proposal and...

Shifting the data dump schedule: A proposal

Temporary policy: Generative AI (e.g., ChatGPT) is banned

2024 Community Moderator Election Results

Visit chat

Linked

6

Strip prefix from variable - bash

5

Is there a way to remove both the prefix and suffix in one shot in BASH using # and %?

2

Unix Shell Script: Remove common prefix from a variable

2

Removing substring (suffix) from Bash variable with sed

0

GIT command to list all the modified file names

2

Bash - how to remove trailing "/bin/java" in commandline?

1

Deleting first line of a variable if it contains specific string in Bash?

0

bash uncompress dynamically-names gz and store in variable

0

Extract a part of names before the start of a patern in linux?

-1

Get domain home / base address from url with IP and Port in shell script

See more linked questions

Related

0

string pattern replacement in bash

3

Replace shortest string match in bash

0

Efficiently replace all substring appearances in pure Bash

0

Bash: How to Remove Multiple Prefix Variants From a String

1

String manipulation in Bash with prefixes

0

how to remove a suffix of a string after a character in bash?

0

Remove prefix, with prefix specified in variable

0

how to replace a specific char occurrences in string after a given substring

1

Bash replace string with another in determined pattern

0

How to replace occurence of substring with another string containing index of occurence?

Hot Network Questions

Using siunitx, how to simultaneously align values by decimal points and in the center in all columns of table?

Does it harm a country/society/economy to destroy a large amount of their money?

Matrices and differentiation commute

Permanent Full moon via "Magic"

Are there any indications what the stance of a future Trump administration would be towards Gaza?

Does the PSR violate Occam’s razor?

Riverboat Soufflé

Questions about "partial negation"

The word *X* means Y: Should Y be in italics, quotes, or neither?

Was any product in Jurassic Park's Gallimimus Gift Shop available as a real world purchase?

Why is it inefficient to expel high speed gas?

Gas or liquid? a Bose-Einstein condensate

Clausen–Scholze's Theorem 9.1 of Analytic.pdf, in view of light condensed sets, AKA is the Liquid Tensor Experiment easier now?

Do US banks cover the loss of money in checking accounts due to identity theft or hacking through the FDIC or some other ways?

Professor claiming first authorship on former student's project

Why is it ok for people to be saying that dark matter makes up x amount of the universe when we don't know what it is?

Small vertical spacing glitch

The darkness that is equivalent to the block of 99.5% of the sun

When RAII is not an option, how to ensure a function is called before end of scope of an object?

Is it more important to have an accepted, rather than submitted paper, when applying for math postdocs?

The effectiveness of "honors" classes

Can one be cruel to nonsentient things?

Does the Keenness of the Stone Giant feat's Stone Throw receive the ability mod to damage?

Why is the retention of ability to synthesize non essential amino acids of negative survival value?

more hot questions

Question feed

Subscribe to RSS

Question feed

To subscribe to this RSS feed, copy and paste this URL into your RSS reader.

lang-bash

Stack Overflow

Questions

Help

Products

Teams

Advertising

Collectives

Talent

Company

About

Press

Work Here

Legal

Privacy Policy

Terms of Service

Contact Us

Cookie Settings

Cookie Policy

Stack Exchange Network

Technology

Culture & recreation

Life & arts

Science

Professional

Business

API

Data

Blog

Facebook

Twitter

LinkedIn

Instagram

Site design / logo © 2024 Stack Exchange Inc; user contributions licensed under CC BY-SA. rev 2024.3.22.6753